<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Richard's Log</title><link href="http://richard.kellnerovci.sk/" rel="alternate"></link><link href="http://richard.kellnerovci.sk/feeds/all.atom.xml" rel="self"></link><id>http://richard.kellnerovci.sk/</id><updated>2015-02-18T21:24:00+01:00</updated><entry><title>Nginx on CentOS from Nginx repository</title><link href="http://richard.kellnerovci.sk/nginx-on-centos-from-nginx-repository.html" rel="alternate"></link><updated>2015-02-18T21:24:00+01:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2015-02-18:nginx-on-centos-from-nginx-repository.html</id><summary type="html">&lt;p&gt;CentOS linux has Nginx in it own repository, but unfortunatelly this version is fairly old. Lets go throught adding official Nginx repository and install newer stable version on CentOS with yum. To add new repository from nginx.org run following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /tmp
wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have new repository and we can install latest version with yum&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once it is installed, enable the service so it is started automatically after reboot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chkconfig nginx on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can start the server now but it wont be accessible from outside network so we have to do some configurtation. Edit nginx.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/nginx/conf.d/default.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to set the servers IP address and domain name where it will listen&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;listen&lt;/span&gt;       &lt;span class="nt"&gt;46&lt;/span&gt;&lt;span class="nc"&gt;.229.234.206&lt;/span&gt;&lt;span class="nd"&gt;:80&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;server_name&lt;/span&gt;  &lt;span class="nt"&gt;richard&lt;/span&gt;&lt;span class="nc"&gt;.kellnerovci.sk&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can start server (other possible commands: stop, status, restart, reload)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets make sure it is running and listening on port 80&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;netstat -tulpn | grep :80
ps aux | grep nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If Nginx welcome site is not accessible in browser most probably firewall is blocking it so lets edit iptables config&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/sysconfig/iptables
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add following line before the final LOG and DROP lines for the INPUT chain to open port 80:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close the file. Now lets restart the firewall and try again...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service iptables restart
&lt;/pre&gt;&lt;/div&gt;</summary><category term="nginx"></category><category term="centos"></category></entry><entry><title>Simple and space efficient backups with rsnapshot</title><link href="http://richard.kellnerovci.sk/simple-and-space-efficient-backups-with-rsnapshot.html" rel="alternate"></link><updated>2015-02-17T22:44:00+01:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2015-02-17:simple-and-space-efficient-backups-with-rsnapshot.html</id><summary type="html">&lt;p&gt;I have been using rsnapshot on my raspberry pi for some time as a backup solutiona and I have to admin it works really well.&lt;/p&gt;
&lt;p&gt;Installation was very easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install rsnapshot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed I have created a config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp /etc/rsnapshot.conf.default /etc/rsnapshot.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are some important values that can be customized, like storage path, but I will focus on backup interavals as that might not be obvious on first use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;retain      hourly  6
retain      daily   7
retain      weekly  4
retain      monthly 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rsnapshot is configured how many of each backups should be kept. Each time rsnapshot is run with the hourly command, it will rotate the hourly.X directories, and then "copy" the contents of the hourly.0 directory (using hard links) into hourly.1.&lt;/p&gt;
&lt;p&gt;When rsnapshot daily is run, it will rotate all the daily.X directories, then copy the contents of hourly.6 into daily.0. So hourly.0 will always contain the most recent backup and daily.7 will contain backup from week ago...&lt;/p&gt;
&lt;p&gt;And we can run the rsnapshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot hourly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot daily
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can automate this task via crontab:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0   */4 * * *  /usr/bin/rsnapshot hourly 
0   3   * * *  /usr/bin/rsnapshot daily
0   2   * * 1  /usr/bin/rsnapshot weekly
0   1   1 * *  /usr/bin/rsnapshot monthly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is good idea to run the larger backup intervals before the lower ones as if hourly backup will run for 45 minutes, it gives use time to finish before just running the difference in daily backup. Othervise daily might not be run at all since once backup is running other wont start. &lt;/p&gt;
&lt;p&gt;If you need to restore any of the backup directory, any user with read permission can simply copy the whole direcotry to desired location. To see how big are the directories with backups, we can simply generate reports, by running command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot du
&lt;/pre&gt;&lt;/div&gt;</summary><category term="backups"></category></entry><entry><title>PostgreSQL: show tables, show databases, show columns, describe table</title><link href="http://richard.kellnerovci.sk/postgresql-show-tables-show-databases-show-columns-describe-table.html" rel="alternate"></link><updated>2013-03-28T17:16:12+01:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2013-03-28:postgresql-show-tables-show-databases-show-columns-describe-table.html</id><summary type="html">&lt;p&gt;PostgreSQL is one of the best databases, which you can choose from when working on your project. If you are switching from MySQL, you will realise immediatelly that you are missing basic commands that you were used to in MySQL. Lets have a look at few basic commands.&lt;/p&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW TABLES&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW DATABASES&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\l&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT datname FROM pg_database;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW COLUMNS&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d table&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT column_name FROM information_schema.columns WHERE table_name ='table';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;DESCRIBE TABLE&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d+ table&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT column_name FROM information_schema.columns WHERE table_name ='table';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</summary><category term="PostgreSQL"></category><category term="MySQL"></category></entry><entry><title>How to get back free space after deleting MySQL database</title><link href="http://richard.kellnerovci.sk/how-to-get-back-free-space-after-deleting-mysql-database.html" rel="alternate"></link><updated>2013-01-31T10:48:00+01:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2013-01-31:how-to-get-back-free-space-after-deleting-mysql-database.html</id><summary type="html">&lt;p&gt;One of the MySQL characteristics when using InnoDB is, if you delete database, MySQL is not able to return empty space back. If you have small databases you probably didnt even noticed it. However if your databases have several GB, you probably wish to get it back.&lt;/p&gt;
&lt;p&gt;Good news is, if you import your DB back, MySQL will use disk space, that it has already taken. So lets set MySQL in a way that we will be able to get back our disk space once we delete the database. InnoDB databases are not able to reduce file ibdata (standard directory in Fedore is situated in /var/lib/mysql). To get disk space back we will have to delete this file, but first lets follow this steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modify MySQL configuration, so server will store data separately for each table. Lets do it in file &lt;strong&gt;my.cnf&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[mysqld]
innodb_file_per_table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have to do the backup of all databases (mysqldump)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete all databases (drop database) apart from these &lt;/p&gt;
&lt;p&gt;mysql, information_schema, performance_schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop MySQL server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Delete files &lt;strong&gt;ibdata1&lt;/strong&gt; and &lt;strong&gt;ib_log* &lt;/strong&gt;
6. Start MySQL server&lt;/li&gt;
&lt;li&gt;Restore databases from backups we have made in step 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we start MySQL server, files &lt;strong&gt;ibdata1&lt;/strong&gt; and &lt;strong&gt;ib-log&lt;/strong&gt; will be created automatically. From now on if we create new databases, in subdirectory of database for each table new file with ibd will be created. In future if you delete database, whole directory will be deleted and we will have automatically disk space back.&lt;/p&gt;</summary><category term="MySQL"></category></entry><entry><title>PHPNW 2012</title><link href="http://richard.kellnerovci.sk/phpnw-2012.html" rel="alternate"></link><updated>2012-10-08T15:12:00+02:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2012-10-08:phpnw-2012.html</id><summary type="html">&lt;p&gt;I have been lucky and during the weekend I attended PHPNW 2012 in Manchester. I would like to express my feelings and shortly describe what it was about. Conference has started on Friday with workshops and probably most interesting was Rob Allen and Evan Coury with: Building a Zend Framework 2 Application.&lt;/p&gt;
&lt;p&gt;On Saturday morning official part was opened by Ade Oshineye with Developer Experience, API Design and Craft Skills. He explained how he had worked on Google Maps API and what should developers think about when designing APIs. During the day I have checked several speeches, and I will mention at two of them. Effective Code Reviews, by Sebastian Marek, how to automate tasks before we start to review code after other developers and what to focus on so this review has meaning. At the end Ian Barber from Google spoke how to manage large amount of data from live stream in speech Building a Firehose. After all speeches there was short word by sponsors and we all went for a beer, to have a technical and less technical discussions…&lt;/p&gt;
&lt;p&gt;Sunday was shorter, but still very interesting. John Cleveley was speaking how did they create a responsive page for BBC and for the rest of the day I have decided to learn theories, I went to listen to Harrie Verveer how to Recognizing Smelly Code. And at the end I watched The Art of Application Logging, by Ben Waine.&lt;/p&gt;
&lt;p&gt;Appart from news that happened in PHP world lectures were more or less advanced. Therefore I think conference was addition and I can recommend next year to any PHP programmer. At the end I will just mention that all speeches were recorded, so hopefully they will be available on &lt;a href="http://conference.phpnw.org.uk/phpnw12/" title="PHPNW 2012"&gt;official page&lt;/a&gt; soon.&lt;/p&gt;</summary><category term="PHP"></category><category term="Conference"></category></entry><entry><title>Serving static files in production environment with Django and Apache</title><link href="http://richard.kellnerovci.sk/serving-static-files-in-production-environment-with-django-and-apache.html" rel="alternate"></link><updated>2012-07-27T17:13:00+02:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2012-07-27:serving-static-files-in-production-environment-with-django-and-apache.html</id><summary type="html">&lt;p&gt;Launching Django project in production environment, sometimes can end up in a state where pictures, css, javastript and other things might not load. Mostly this is result of wrong static files setup. In this article we will show how to set it up correctly.&lt;/p&gt;
&lt;p&gt;In production environment static files should be allways send by webserver. In order to manage this, we need to collect static files and make sure that they are served by webserver. In our case we will show it on Apache webserver configuration (but same applies for other webservers).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;STATIC_ROOT = &amp;#39;/var/www/localhost/htdocs/mysite/static/&amp;#39;
STATIC_URL = &amp;#39;/static/&amp;#39; # default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django knows where to collect static files, so we dont have to specify anything. If we use our own files we have to specify them in &lt;em&gt;STATICFILES_DIRS&lt;/em&gt; configuration variable. In directory &lt;em&gt;/var/www/localhost/htdocs/mysite/&lt;/em&gt; we have to execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will copy all static files from all installed applications. If you want to save space, it is possible to run script with parameter &lt;em&gt;-l&lt;/em&gt; and it will create symbolic links instead of copy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;httpd.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to configure webserver so it knows where are static files stored. Let's modify Apache's config (either httpd.conf, or vhost) and add information about &lt;em&gt;STATIC_URL&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Alias /static/ /var/www/localhost/htdocs/mysite/static/
Directory /var/www/localhost/htdocs/mysite/static
Order deny,allow
Allow from all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart Apache and we are done. &lt;/p&gt;</summary><category term="Django"></category><category term="Apache"></category></entry><entry><title>How to start with virtualenv?</title><link href="http://richard.kellnerovci.sk/how-to-start-with-virtualenv.html" rel="alternate"></link><updated>2012-06-23T16:37:00+02:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2012-06-23:how-to-start-with-virtualenv.html</id><summary type="html">&lt;p&gt;As the name virtualenv implies, it is isolated virtual environment, which allows us install multiple versions of python applications and libraries on one system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What is it good for?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Python allows install packages, which are available globally for whole system. If you are developing multiple applications, which needs different versions of dependencies, it is the right time to use virtual environments. For example we have web application that uses Django 1.3.1 and we want to migrate it into version 1.4.0 and have both versions available at the same time. This is what is virtual environments used for, because it allows us to have installed both versions on one machine at the same time.&lt;/p&gt;
&lt;p&gt;We will use pip (Python Package Manager) for installation, but if you are used to easy_install you can use it as well. Following commands requires root access, or at least sudo access, so you can install packages globally for all users.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install pip
sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next command execute as standard user, who would like to use virtual environments. Lets create directory where will be python isolated environment, where all packages will be stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv --no-site-packages envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step is activate virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd envs
source bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After executing this command, our command line changes a little bit, and now we can install packages into our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django==1.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this command will install django version 1.4.0 into virtual environment, and all other users can use globaly installed django version 1.3.1. This way you can install all necessary packages for your application. Later when we will need to move (synchronize) them from your virtual environment into server, or other computer, simply export all installed packages into text file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on server just install all packages with command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category><category term="virtualenv"></category></entry><entry><title>EXT3/EXT2 filesystem in Mac OS X Lion</title><link href="http://richard.kellnerovci.sk/ext3ext2-filesystem-in-mac-os-x-lion.html" rel="alternate"></link><updated>2012-05-30T01:00:00+02:00</updated><author><name>Richard Kellner</name></author><id>tag:richard.kellnerovci.sk,2012-05-30:ext3ext2-filesystem-in-mac-os-x-lion.html</id><summary type="html">&lt;p&gt;While ago I needed to mount EXT3 file system in Mac OS X Lion, it doesn’t seems as a big problem as there is plenty of manuals how to do it. Unfortunately most of them are out of date. So I have decided to write down how to do it.&lt;/p&gt;
&lt;p&gt;We will need this software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/downloads/osxfuse/osxfuse/OSXFUSE-2.3.4.dmg"&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://prdownloads.sourceforge.net/fuse-ext2/fuse-ext2-0.0.7.dmg?download"&gt;Fuse-ext2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is required to install them in this order.&lt;/p&gt;
&lt;p&gt;Fuse-ext2 require MacFuse to work, unfortunately this one is no longer maintained and doesn’t works in Lion. OSXFuse is next generation MacFuse, but Fuse-ext2 wasn’t designed to work with it. Luckily OSXFuse has “MacFUSE Compatibility Layer”. Select this option while installing OSXFuse and you are ready to go.&lt;/p&gt;
&lt;p&gt;Once everything is installed, try to mount EXT3 or EXT2 partition on USB key and key should automatically mount.&lt;/p&gt;
&lt;p&gt;PS. &lt;em&gt;Disk is read only, without possibility of write because this option is unstable.&lt;/em&gt;&lt;/p&gt;</summary><category term="Mac OS X"></category><category term="EXT3"></category></entry></feed>