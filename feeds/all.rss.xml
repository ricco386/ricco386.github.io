<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Richard's Log</title><link>http://richard.kellnerovci.sk/</link><description>Public notepad about stuff I am currently playing with...</description><atom:link href="http://richard.kellnerovci.sk/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 30 Apr 2015 01:40:00 +0200</lastBuildDate><item><title>Update Raspbian Wheezy to Jessie</title><link>http://richard.kellnerovci.sk/update-raspbian-wheeze-to-jessie.html</link><description>&lt;p&gt;This weekend was released new version of Debian Linux, with codename “Jessie”. I have decided to update my Raspbian with Jessie source list and give upgrade a try.&lt;/p&gt;
&lt;p&gt;First backup sources list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cp /etc/apt/sources.list /etc/apt/sources.list.wheezy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets check what’s inside&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;cat&lt;/span&gt; &lt;span class="err"&gt;/etc/apt/sources.list&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://mirrordirector.raspbian.org/raspbian/&lt;/span&gt; &lt;span class="kp"&gt;wheezy&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt; &lt;span class="kp"&gt;rpi&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment line below then &amp;#39;apt-get update&amp;#39; to enable &amp;#39;apt-get source&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#deb-src http://mirror.ox.ac.uk/sites/archive.raspbian.org/archive/raspbian/ wheezy main contrib non-free rpi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace wheezy with jessie&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo sed -i &amp;#39;s/wheezy/jessie/g&amp;#39; /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can update sources and upgrade packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might be prompted with some questions, for me it was only one prompt if all services should be restarted as they can cause downtimes. I allowed their restart and I wasn’t even kicked out of ssh.&lt;/p&gt;
&lt;p&gt;I have also run dist-upgrade, to update all packages even this install some packages that are not necessary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get dist-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again you might be prompted several times that config files have changed, and since I wasn’t doing any changes I have updated new versions. You will also be prompted if you want to disable ssh password authentication as root, which I think is a good idea.&lt;/p&gt;
&lt;p&gt;As I mentioned earlier upgrade will download some extra packages, so if you use Raspberry Pi with terminal only you can run removal commands from &lt;a href="/minimize-raspbian-image.html"&gt;Minimized Raspbian image&lt;/a&gt; article where we were minimising Raspbian image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; So far I have only noticed that python3-rpi.gpio is not installed as it depends on Python3 lesser than 3.3 and Jessie has 3.4.2&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Thu, 30 Apr 2015 01:40:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-29:update-raspbian-wheeze-to-jessie.html</guid><category>Raspberry Pi</category><category>Raspbian</category><category>Python</category></item><item><title>Enable PostgreSQL connection from remote machine</title><link>http://richard.kellnerovci.sk/enable-postgresql-connection-from-remote-machine.html</link><description>&lt;p&gt;Let’s continue in previous article and enable PostgreSQL connection from different machine in network. This allows Zabbix web interface to connect from another machine.&lt;/p&gt;
&lt;p&gt;To allow connection from another machine in network to PostgreSQL modify configuration file &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/postgresql/9.1/main/pg_hba.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add line to give access to database (zabbix) for user (zabbix) from network (192.168.1.0/24)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;host    zabbix          zabbix          192.168.1.0/24         trust
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;open PostgreSQL configuration file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/postgresql/9.1/main/postgresql.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To set IP address(es) to listen on, find line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;listen_addresses=&amp;#39;localhost&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and replace with comma separated list of addresses, or * for all IPs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;listen_addresses = ‘*’
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart PostgreSQL server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/init.d/postgresql restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test your setup from machine where zabbix fronted will be run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -h 192.168.1.1 -U zabbix -d zabbix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To setup Zabbix web interface just return to &lt;a href="/install-zabbix-on-raspberry-pi.html"&gt;previous article&lt;/a&gt; and follow the steps there…&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Wed, 29 Apr 2015 01:44:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-29:enable-postgresql-connection-from-remote-machine.html</guid><category>Zabbix</category><category>PostgreSQL</category><category>Raspbian</category></item><item><title>Let`s learn what is going on with Raspberry Pis in home network</title><link>http://richard.kellnerovci.sk/install-zabbix-on-raspberry-pi.html</link><description>&lt;p&gt;Since I have several Raspberry Pi’s at home, I figured out it would be cool to know how they perform while I am not using them. I decided to install &lt;a href="http://www.zabbix.com/"&gt;Zabbix&lt;/a&gt; on one of them. If you don’t know what Zabbix is, it is an open source monitoring solution for networks and applications.&lt;/p&gt;
&lt;p&gt;Let`s install dependencies required for compiling Zabbix from source.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libxml2-dev libsnmp-dev libcurl4-openssl-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have decided to use PostgreSQL, even though MySQL is available as well, but the performance on Raspberry Pi is significant better with PostgreSQL. Raspbian Wheezy has in repositories version 9.1 available, which is older but sufficient&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install postgresql-9.1 postgresql-server-dev-9.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to use Zabbix with MySQL (which I do NOT recommend) install additional library&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get libmysqld-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets create zabbix user&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo adduser --no-create-home zabbix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to login to database as postgres&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo -s
su postgres
psql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connect to template1, create new database and grant access to zabbix user&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\c template1
CREATE USER zabbix WITH PASSWORD &amp;#39;secretPASSWORD&amp;#39;;
CREATE DATABASE zabbix;
GRANT ALL PRIVILEGES ON DATABASE zabbix TO zabbix;
\q
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Switch back to pi user and download latest &lt;a href="http://www.zabbix.com/download.php"&gt;Zabbix from official page&lt;/a&gt; copy to Raspberry Pi and extract it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tar -zxvf zabbix-2.4.5.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to import database schema and data, so go to postgresql directory and import files in this order&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd database/postgresql
psql -U zabbix zabbix &amp;lt; schema.sql
psql -U zabbix zabbix &amp;lt; images.sql
psql -U zabbix zabbix &amp;lt; data.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you want it to install to MySQL, just switch import directory postgresql to mysql and import files in the same order. Performance tuning tip for MySQL is to use MyISAM instead of InnoDB as storage engine, it will lower the requirements for CPU when running, but be aware that this step is NOT recommended by Zabbix.&lt;/p&gt;
&lt;p&gt;Return back to Zabbix root directory and start compiling with this options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./configure --enable-server --enable-agent --with-postgresql --with-net-snmp --with-libcurl --with-libxml2
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For MySQL installation change from &lt;code&gt;—-with-postgresql&lt;/code&gt; to &lt;code&gt;—-with-mysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We need to set database name &lt;code&gt;DBName&lt;/code&gt;, user &lt;code&gt;DBUser&lt;/code&gt; and password &lt;code&gt;DBPassword&lt;/code&gt; in file zabbix_server.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /usr/local/etc/zabbix_server.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Update zabbix_agentd.conf with &lt;code&gt;Server&lt;/code&gt; IP address set to 127.0.0.1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /usr/local/etc/zabbix_agentd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy daemons into system&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cp misc/init.d/debian/zabbix-server /etc/init.d/
sudo cp misc/init.d/debian/zabbix-agent /etc/init.d/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Modify daemons and add LSB tags so they are proper Debian init scripts and we can manipulate them with service command (analogically do the same for agent script)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class="c"&gt;# Provides:          zabbix_server&lt;/span&gt;
&lt;span class="c"&gt;# Required-Start:    $all&lt;/span&gt;
&lt;span class="c"&gt;# Required-Stop:     &lt;/span&gt;
&lt;span class="c"&gt;# Default-Start:     2 3 4 5&lt;/span&gt;
&lt;span class="c"&gt;# Default-Stop:      0 1 6&lt;/span&gt;
&lt;span class="c"&gt;# Short-Description: Zabbix server&lt;/span&gt;
&lt;span class="c"&gt;# Description:       Zabbix server daemon&lt;/span&gt;
&lt;span class="c"&gt;### END INIT INFO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Setup on boot daemon start and start both daemons&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo chmod 755 /etc/init.d/zabbix-server
sudo update-rc.d zabbix-server defaults
/etc/init.d/zabbix-server start

sudo chmod 755 /etc/init.d/zabbix-agent
sudo update-rc.d zabbix-agent defaults
/etc/init.d/zabbix-agent start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is possible to have the PHP web interface on the same Raspberry Pi, however I have tested on first version and it works, but the performance is slow and sometimes it really overload the whole OS. I managed to make load higher than 20 with draining whole RAM and SWAP, so my recommendation is to install it on other machine, but if that is not an option for you, follow this steps to install Zabbix web interface on your Raspberry Pi&lt;/p&gt;
&lt;p&gt;We need to have Nginx and PHP installed, I have already talked about it in older &lt;a href="/install-nginx-php-and-mysql-on-raspberry-pi.html"&gt;blog post&lt;/a&gt;. We also need install dependencies required for PHP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install php5-gd php5-pgsql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create directory where webgui will be stored and set web server owner&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir /var/www/zabbix
sudo cp -a frontends/php/* /var/www/zabbix/
sudo chown -R www-data /var/www/zabbix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to update php.ini so it matches the Zabbix requirements&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/php5/fpm/php.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure these values are set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;max_execution_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="n"&gt;max_input_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="n"&gt;post_max_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;supported&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//php.net/manual/en/timezones.php)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PHP has to be reloaded in order to our changes take effects&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/php5-fpm restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also need to create site-available configuration file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ipv4&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Raspberry&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;

    &lt;span class="n"&gt;access_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Parse&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nc"&gt;.php&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zabbix&lt;/span&gt; &lt;span class="nt"&gt;directory&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;.php&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;.*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zabbix&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;QUERY_STRING&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;REQUEST_METHOD&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;CONTENT_TYPE&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;CONTENT_LENGTH&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_intercept_errors&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_ignore_client_abort&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_connect_timeout&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_send_timeout&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_read_timeout&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_buffer_size&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_buffers&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_busy_buffers_size&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fastcgi_temp_file_write_size&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Disable&lt;/span&gt; &lt;span class="nt"&gt;viewing&lt;/span&gt; &lt;span class="nc"&gt;.htaccess&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;.htpassword&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;.ht&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;deny&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reload Nginx to read new configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open browser and visit your Raspberry Pi and finish configuration in browser&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Sun, 26 Apr 2015 22:09:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-26:install-zabbix-on-raspberry-pi.html</guid><category>Raspberry Pi</category><category>Raspbian</category><category>Zabbix</category><category>PostgreSQL</category><category>MySQL</category></item><item><title>Install Ludolph on Raspberry Pi</title><link>http://richard.kellnerovci.sk/install-ludolph-on-raspberry-pi.html</link><description>&lt;p&gt;&lt;a href="https://github.com/erigones/Ludolph"&gt;Ludolph&lt;/a&gt; is Jabber Bot with &lt;a href="http://www.zabbix.com/"&gt;Zabbix&lt;/a&gt; support, it is lightweight and has very few dependencies, therefore ideal to run on Raspberry Pi. It is easily extensible and you can write your own plugins in Python, so you can do literary anything with it via Jabber. Ludolph supports both Python 2 and Python 3.&lt;/p&gt;
&lt;p&gt;One of the benefits of having a Jabber bot on Raspberry Pi is that you can communicate with it, even if it doesn’t have public IP address.  Easiest way is to install in into virtualenv and you can start playing with it immediately. We will go throughout proper Raspbian installation with a separate user and setting service as you would run it on production server.&lt;/p&gt;
&lt;p&gt;Add user under which we will run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;useradd -M ludolph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default Raspberry Pi doesn’t have PIP installed, so we have to add it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can install Ludolph into Raspbian&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip install ludolph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Download the init script for Debian based linux from Github and make it executable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo wget -O /etc/init.d/ludolph https://raw.github.com/erigones/Ludolph/master/init.d/ludolph.debian
sudo chmod +x /etc/init.d/ludolph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to make a few amendments in the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;USER=ludolph&lt;/span&gt;
&lt;span class="x"&gt;PIDFILE=/tmp/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;DAEMON=&amp;quot;/usr/local/bin/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Make sure &lt;code&gt;USER&lt;/code&gt; is set to newly crated user &lt;/li&gt;
&lt;li&gt;user has proper write permissions for file configured in &lt;code&gt;PIDFILE&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEAMON&lt;/code&gt; is path to Ludolph executable script.   //Update init script. GIT update path to ludolph&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we need to copy configuration file &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo wget -O /etc/ludolph.cfg https://raw.github.com/erigones/Ludolph/master/ludolph/ludolph.cfg.example
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And setup required fields. We are running it is daemon mode so enable this option, uncomment pidfile option and make sure it matches the path defined in &lt;code&gt;PIDFILE&lt;/code&gt; in init script. Also setup login credentials that you would like to use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="c1"&gt;# We are going to run Ludolph in daemon mode&lt;/span&gt;
&lt;span class="na"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment, add path to pid file&lt;/span&gt;
&lt;span class="c1"&gt;# Make sure that `USER` has proper write permissions&lt;/span&gt;
&lt;span class="na"&gt;pidfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tmp/ludolph.pid&lt;/span&gt;
&lt;span class="c1"&gt;# Use a dedicated jabber account for Ludolph&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ludolph@example.com&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ludolphpassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other useful options you probably want to fill in is users and admins configuration variables so nobody (except you) will be able to talk to Ludolph. Just put in there your jabber ID. Afterwards we need to adjust the configuration file ownership and permissions so nobody except the user under which Ludolph runs is able to read it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo chown root:USERgroup /etc/ludolph.cfg
sudo chmod 0640 /etc/ludolph.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we can start Ludolph as a regular Raspbian service&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service ludolph start
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Mon, 13 Apr 2015 16:18:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-13:install-ludolph-on-raspberry-pi.html</guid><category>Raspberry Pi</category><category>Raspbian</category><category>Ludolph</category></item><item><title>Minimized Raspbian image (no X server) with SD card backup</title><link>http://richard.kellnerovci.sk/minimize-raspbian-image.html</link><description>&lt;p&gt;Most of the time I am using Raspbian only in command line so I’ve decided to create a minimal image, with removed X server and other unnecessary stuff that is not needed for a server. &lt;/p&gt;
&lt;p&gt;You might want to ask why to remove all the stuff when SD cards are cheap today? One reason is that with less packages there is lesser probability to have bugs in the system and other reason is that updates will take less time, as I don’t need to update packages that I don’t need.&lt;/p&gt;
&lt;p&gt;Remove everything related to: X server, LXDE, Openbox, GTK, Alsa and TTF fonts. It will also remove the packages omxplayer, nano (vim rulez :), tsconf (for touch screens) and scratch (a programming environment aimed for kids).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get purge xserver* x11-common x11-utils x11-xkb-utils x11-xserver-utils xarchiver xauth xkb-data console-setup xinit lightdm libx{composite,cb,cursor,damage,dmcp,ext,font,ft,i,inerama,kbfile,klavier,mu,pm,randr,render,res,t,xf86}* lxde* lx{input,menu-data,panel,polkit,randr,session,session-edit,shortcut,task,terminal} obconf openbox gtk* libgtk* alsa* nano scratch tsconf desktop-file-utils omxplayer
sudo apt-get autoremove
sudo apt-get autoclean
sudo apt-get clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not entirely sure why, but apt-get autoclean will remove Python libraries for GPIO and camera, so I had to install them back&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-picamera python3-picamera python3-rpi.gpio python-rpi.gpio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally remove some files that left and I don’t think they are necessary&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm -rf /usr/share/icons/ /usr/games/ /usr/share/themes/ /usr/share/images/ /home/pi/python_games/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before cleanup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Filesystem                    Size  Used Avail Use% Mounted on
rootfs                        2.9G  2.5G  245M  92% /
/dev/root                     2.9G  2.5G  245M  92% /
devtmpfs                       88M     0   88M   0% /dev
tmpfs                          19M  228K   19M   2% /run
tmpfs                         5.0M     0  5.0M   0% /run/lock
tmpfs                          37M     0   37M   0% /run/shm
/dev/mmcblk0p1                 56M  9.8M   47M  18% /boot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After clean up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Filesystem                    Size  Used Avail Use% Mounted on
rootfs                        2.9G  922M  1.9G  34% /
/dev/root                     2.9G  922M  1.9G  34% /
devtmpfs                       88M     0   88M   0% /dev
tmpfs                          19M  224K   19M   2% /run
tmpfs                         5.0M     0  5.0M   0% /run/lock
tmpfs                          37M     0   37M   0% /run/shm
/dev/mmcblk0p1                 56M  9.8M   47M  18% /boot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Image size went down from 2.5GB to 922MB which is significant improvement and after reboot everything seems working… &lt;/p&gt;
&lt;p&gt;It is always a good idea to backup, so let create an backup of the SD card with dd command. You have to know which device is your SD card, how to do so I have explained &lt;a href="/install-raspbian-on-raspberry-pi.html"&gt;here&lt;/a&gt;. Insert SD card to your Mac or Linux and run dd command (replace /dev/diskX with your path).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dd if=/dev/diskX of=/path/to/image bs=1M
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my case it would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dd if=/dev/sdc1 of=~/raspbian-wheezy-minimized.img bs=1M
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On some systems (like Mac) &lt;em&gt;1M&lt;/em&gt; has to be lower case &lt;em&gt;1m&lt;/em&gt;. This command takes quite a while. So grab a coffee and read another article.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Sun, 12 Apr 2015 22:53:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-12:minimize-raspbian-image.html</guid><category>Raspberry Pi</category><category>Raspbian</category><category>backups</category></item><item><title>Open source weekend in Bratislava</title><link>http://richard.kellnerovci.sk/opensource-weekend-in-bratilsava-2015.html</link><description>&lt;p&gt;During the weekend 14-15th of March 2015, &lt;a href="http://www.soit.sk/"&gt;SOIT&lt;/a&gt; was organising Open Source weekend in Bratislava. As a member I have decided to gave a talk how to start Django project. Here is my brief summary of the conference and what it was all about. I think I can separate talks into several sections, even these were not official sections of the conference. &lt;/p&gt;
&lt;p&gt;OpenData and Open government was one large section in Saturday afternoon. Even thou I am not working with big data, I have always supported the idea that all data produced by any government should be open and easily accessible by people. Now I have realised how important it is. There have to be people who understand the topic, because otherwise it would be just another project that looks good on paper, but is useless in real world. We have several bright people trying to push government right way, so new interesting projects can be born, instead of wasting money on useless webpages produced by half professional companies. Unfortunately public interest seems to be very low for this topic. Part of this section was talk about secret service attempt for a new law invading peoples privacy, followed by nice discussion. I have to mention there is a &lt;a href="http://www.changenet.sk/?section=kampane&amp;amp;x=796541"&gt;petition&lt;/a&gt; against this law.&lt;/p&gt;
&lt;p&gt;The Conference was attended by quite a lot of people from RedHat, which is based in Brno, not far away from Bratislava. There was plenty of Fedora DVDs so I decided to switch from Mint, as the live DVD was working fine for me and drivers I had problems with in the past seems to be resolved. There was a large variety of talks from general explanations how Fedora workstation is done to Linux core interruptions. It was rather nice and refreshing as I was using Fedora long years in my previous job and I can see they are trying hard to keep good operating system.&lt;/p&gt;
&lt;p&gt;Probably the largest part was dedicated to introduce the open source projects. Part of the speakers were introducing their own projects to larger audience and the others talked how to start using tools.&lt;/p&gt;
&lt;p&gt;For me this was the most interesting bit. I have learned few new tricks and I decided to start using &lt;a href="http://www.ansible.com/"&gt;Ansible&lt;/a&gt; as it seems cool tool for my horde of Raspberry Pi’s. I gave a talk about &lt;a href="https://github.com/ricco386/zaciname-s-djangom"&gt;how to start with Django&lt;/a&gt; (&lt;a href="http://richard.kellnerovci.sk/zaciname-s-djangom/#/"&gt;slides&lt;/a&gt;). It was brief introduction to Django and quick tutorial how to start a project with explanation of models, views, templates with examples of Don’t Repeat Yourself principles.&lt;/p&gt;
&lt;p&gt;Overall I think the event went rather well, and next year I will gladly join the conference again. Apart glitch with buffet closed on Sunday, everything went fine and I am happy I met several interesting people.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Fri, 10 Apr 2015 21:26:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2015-04-10:opensource-weekend-in-bratilsava-2015.html</guid><category>Conference</category></item><item><title>Nginx on CentOS from Nginx repository</title><link>http://richard.kellnerovci.sk/nginx-on-centos-from-nginx-repository.html</link><description>&lt;p&gt;CentOS linux has Nginx in it own repository, but unfortunatelly this version is fairly old. Lets go throught adding official Nginx repository and install newer stable version on CentOS with yum. To add new repository from nginx.org run following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /tmp
wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have new repository and we can install latest version with yum&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once it is installed, enable the service so it is started automatically after reboot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chkconfig nginx on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can start the server now but it wont be accessible from outside network so we have to do some configurtation. Edit nginx.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/nginx/conf.d/default.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to set the servers IP address and domain name where it will listen&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;listen&lt;/span&gt;       &lt;span class="nt"&gt;46&lt;/span&gt;&lt;span class="nc"&gt;.229.234.206&lt;/span&gt;&lt;span class="nd"&gt;:80&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;server_name&lt;/span&gt;  &lt;span class="nt"&gt;richard&lt;/span&gt;&lt;span class="nc"&gt;.kellnerovci.sk&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can start server (other possible commands: stop, status, restart, reload)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets make sure it is running and listening on port 80&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;netstat -tulpn | grep :80
ps aux | grep nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If Nginx welcome site is not accessible in browser most probably firewall is blocking it so lets edit iptables config&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/sysconfig/iptables
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add following line before the final LOG and DROP lines for the INPUT chain to open port 80:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close the file. Now lets restart the firewall and try again...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service iptables restart
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Wed, 18 Feb 2015 21:24:00 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2015-02-18:nginx-on-centos-from-nginx-repository.html</guid><category>Nginx</category><category>CentOS</category></item><item><title>Simple and space efficient backups with rsnapshot</title><link>http://richard.kellnerovci.sk/simple-and-space-efficient-backups-with-rsnapshot.html</link><description>&lt;p&gt;I have been using rsnapshot on my raspberry pi for some time as a backup solutiona and I have to admin it works really well.&lt;/p&gt;
&lt;p&gt;Installation was very easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install rsnapshot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed I have created a config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp /etc/rsnapshot.conf.default /etc/rsnapshot.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are some important values that can be customized, like storage path, but I will focus on backup interavals as that might not be obvious on first use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;retain      hourly  6
retain      daily   7
retain      weekly  4
retain      monthly 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rsnapshot is configured how many of each backups should be kept. Each time rsnapshot is run with the hourly command, it will rotate the hourly.X directories, and then "copy" the contents of the hourly.0 directory (using hard links) into hourly.1.&lt;/p&gt;
&lt;p&gt;When rsnapshot daily is run, it will rotate all the daily.X directories, then copy the contents of hourly.6 into daily.0. So hourly.0 will always contain the most recent backup and daily.7 will contain backup from week ago...&lt;/p&gt;
&lt;p&gt;And we can run the rsnapshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot hourly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot daily
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can automate this task via crontab:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0   */4 * * *  /usr/bin/rsnapshot hourly 
0   3   * * *  /usr/bin/rsnapshot daily
0   2   * * 1  /usr/bin/rsnapshot weekly
0   1   1 * *  /usr/bin/rsnapshot monthly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is good idea to run the larger backup intervals before the lower ones as if hourly backup will run for 45 minutes, it gives use time to finish before just running the difference in daily backup. Othervise daily might not be run at all since once backup is running other wont start. &lt;/p&gt;
&lt;p&gt;If you need to restore any of the backup directory, any user with read permission can simply copy the whole direcotry to desired location. To see how big are the directories with backups, we can simply generate reports, by running command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsnapshot du
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Tue, 17 Feb 2015 22:44:00 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2015-02-17:simple-and-space-efficient-backups-with-rsnapshot.html</guid><category>backups</category></item><item><title>PostgreSQL: show tables, show databases, show columns, describe table</title><link>http://richard.kellnerovci.sk/postgresql-show-tables-show-databases-show-columns-describe-table.html</link><description>&lt;p&gt;PostgreSQL is one of the best databases, which you can choose from when working on your project. If you are switching from MySQL, you will realise immediatelly that you are missing basic commands that you were used to in MySQL. Lets have a look at few basic commands.&lt;/p&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW TABLES&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW DATABASES&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\l&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT datname FROM pg_database;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;SHOW COLUMNS&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d table&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT column_name FROM information_schema.columns WHERE table_name ='table';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;MySQL: &lt;strong&gt;&lt;code&gt;DESCRIBE TABLE&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;\d+ table&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL: &lt;strong&gt;&lt;code&gt;SELECT column_name FROM information_schema.columns WHERE table_name ='table';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Thu, 28 Mar 2013 17:16:12 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2013-03-28:postgresql-show-tables-show-databases-show-columns-describe-table.html</guid><category>PostgreSQL</category><category>MySQL</category></item><item><title>Install Nginx PHP and MySQL on Raspberry Pi</title><link>http://richard.kellnerovci.sk/install-nginx-php-and-mysql-on-raspberry-pi.html</link><description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2015-04-12&lt;/strong&gt;: Article has been updated with minor improvements and fixed steps to match current installation workflow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Previously we have &lt;a href="/install-raspbian-on-raspberry-pi.html"&gt;installed Raspbian&lt;/a&gt;, now we can do some actual work and install Nginx, PHP and MySQL on our Raspberry Pi. Afterwards we can use our Raspberry Pi as full-fledged home webserver.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install nginx php5-fpm php5-cgi php5-cli php5-common
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you open the browser and go to your Raspberry Pi IP address, you will see the Welcome to Nginx site. Let’s create our own. We need a directory where we will store our pages, new directory has to be amended so it is accessible for Nginx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir -p /var/www/rasppi
sudo chmod -R 775 /var/www
sudo chown -R www-data:www-data /var/www
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create Nginx configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/nginx/sites-available/rasppi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and insert following config. You have to update it with IP address of your Raspberry Pi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ipv4&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Raspberry&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;

&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;access_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Parse&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nc"&gt;.php&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;rasppi&lt;/span&gt; &lt;span class="nt"&gt;directory&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;.php&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;.*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rasppi&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;QUERY_STRING&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;REQUEST_METHOD&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;CONTENT_TYPE&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;CONTENT_LENGTH&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_intercept_errors&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_ignore_client_abort&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_connect_timeout&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_send_timeout&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_read_timeout&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_buffer_size&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_buffers&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_busy_buffers_size&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;fastcgi_temp_file_write_size&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Disable&lt;/span&gt; &lt;span class="nt"&gt;viewing&lt;/span&gt; &lt;span class="nc"&gt;.htaccess&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;.htpassword&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;.ht&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;deny&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let’s allow this new config and disable default one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /etc/nginx/sites-available/rasppi /etc/nginx/sites-enabled/rasppi
sudo rm /etc/nginx/sites-enabled/default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are done with Nginx settings, now we have to update php-fpm configuration, edit following file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/php5/fpm/pool.d/www.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;find line with &lt;code&gt;listen = /var/run/php5-fpm.sock&lt;/code&gt; and replace to: &lt;code&gt;listen = 127.0.0.1:9000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create index page with PHP info so we are sure that everything works&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to restart both services&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service php5-fpm restart 
sudo service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nginx and PHP are finished and running, open your browser and check it out. You should see the PHP info page displaying your Raspberry is running PHP 5.4. And we can install MySQL database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install mysql-server mysql-client php5-mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;during the installation you should be asked for root password, if this hasn’t happened, don’t worry and set it with following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysqladmin -u root password yourSECRETrootSQLpassword
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are done. Now we have web server with PHP and MySQL running on Raspberry Pi.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Sun, 12 Apr 2015 10:53:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2013-03-08:install-nginx-php-and-mysql-on-raspberry-pi.html</guid><category>Raspberry Pi</category><category>Raspbian</category><category>Nginx</category><category>PHP</category><category>MySQL</category></item><item><title>Install Raspbian on Raspberry Pi</title><link>http://richard.kellnerovci.sk/install-raspbian-on-raspberry-pi.html</link><description>&lt;p&gt;Raspbian “wheezy” is optimized version of Debian for Raspberry Pi. We will talk about how to install Raspbian on SD card so it is bootable on Raspberry Pi. This guide is almost identical with official wiki, but we will also upgrade firmware and run some comparison tests. We will do all the work in Linux terminal, if you are looking for graphical environment or Windows installer I suggest &lt;a href="http://elinux.org/RPi_Easy_SD_Card_Setup"&gt;oficial wiki&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Raspbian image from official page: &lt;a href="http://www.raspberrypi.org/downloads"&gt;http://www.raspberrypi.org/downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Verify downloaded file hashif it matches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sha1sum ~/2013-02-09-wheezy-raspbian.zip&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip downloaded file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;unzip ~/2013-02-09-wheezy-raspbian.zip&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List mounted devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insert SD card to computer&lt;/li&gt;
&lt;li&gt;List mounted devices again and notice which one is new&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There should be new device, notice where it is mounted, for example: /dev/sdd&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disconnect all mounted partitions (if there is more of them, you have to repeat command for all of them) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;umount /dev/sdd1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with dd command move image to SD card. Run it as sudo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sudo dd bs=4M if=~/2013-02-09-wheezy-raspbian.img of=/dev/sdd&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure cache was cleared and remove the card&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sudo sync&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insert SD cart to Raspberry Pi and let have some fun&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is handy to have monitor connected to Raspberry on first boot, because there will be setup screen where you can setup basic things. One of the useful things is to resign Raspbian partition to SD card size, or start SSH on boot, so we can connect to Raspberry later on without having it connected to monitor.&lt;/p&gt;
&lt;p&gt;After login update all installed packages to newest versions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get update
apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets do IO operations benchmark on SD card&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pi@raspberrypi ~ $ dd if=/dev/zero of=~/test.tmp bs=500K count=1024
1024+0 records in
1024+0 records out
524288000 bytes (524 MB) copied, 49.9496 s, 10.5 MB/s
pi@raspberrypi ~ $ dd if=~/test.tmp of=/dev/null bs=500K count=1024
1024+0 records in
1024+0 records out&amp;lt;br&amp;gt;524288000 bytes (524 MB) copied, 26.9565 s, 19.4 MB/s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets have a look at firmware version with command vcgencmd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pi@raspberrypi ~ $ vcgencmd version
Feb 7 2013 16:46:17 
Copyright (c) 2012 Broadcom
version 367974 (release)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Latest firmware is available on github: &lt;a href="https://github.com/Hexxeh/rpi-firmware"&gt;https://github.com/Hexxeh/rpi-firmware&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update &amp;amp;&amp;amp; sudo chmod +x /usr/bin/rpi-update
sudo rpi-update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets have a look at output with upgraded firmware, at the end…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pi@raspberrypi ~ $ vcgencmd version
Mar 4 2013 22:02:46 
Copyright (c) 2012 Broadcom
version 374489 (release)
pi@raspberrypi ~ $ dd if=/dev/zero of=~/test.tmp bs=500K count=1024
1024+0 records in
1024+0 records out
524288000 bytes (524 MB) copied, 45.1423 s, 11.6 MB/s
pi@raspberrypi ~ $ dd if=~/test.tmp of=/dev/null bs=500K count=1024
1024+0 records in
1024+0 records out
524288000 bytes (524 MB) copied, 27.4592 s, 19.1 MB/s
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Thu, 07 Mar 2013 09:31:00 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2013-03-07:install-raspbian-on-raspberry-pi.html</guid><category>Raspberry Pi</category><category>Raspbian</category></item><item><title>How to get back free space after deleting MySQL database</title><link>http://richard.kellnerovci.sk/how-to-get-back-free-space-after-deleting-mysql-database.html</link><description>&lt;p&gt;One of the MySQL characteristics when using InnoDB is, if you delete database, MySQL is not able to return empty space back. If you have small databases you probably didnt even noticed it. However if your databases have several GB, you probably wish to get it back.&lt;/p&gt;
&lt;p&gt;Good news is, if you import your DB back, MySQL will use disk space, that it has already taken. So lets set MySQL in a way that we will be able to get back our disk space once we delete the database. InnoDB databases are not able to reduce file ibdata (standard directory in Fedore is situated in /var/lib/mysql). To get disk space back we will have to delete this file, but first lets follow this steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modify MySQL configuration, so server will store data separately for each table. Lets do it in file &lt;strong&gt;my.cnf&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[mysqld]
innodb_file_per_table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have to do the backup of all databases (mysqldump)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete all databases (drop database) apart from these &lt;/p&gt;
&lt;p&gt;mysql, information_schema, performance_schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop MySQL server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Delete files &lt;strong&gt;ibdata1&lt;/strong&gt; and &lt;strong&gt;ib_log* &lt;/strong&gt;
6. Start MySQL server&lt;/li&gt;
&lt;li&gt;Restore databases from backups we have made in step 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we start MySQL server, files &lt;strong&gt;ibdata1&lt;/strong&gt; and &lt;strong&gt;ib-log&lt;/strong&gt; will be created automatically. From now on if we create new databases, in subdirectory of database for each table new file with ibd will be created. In future if you delete database, whole directory will be deleted and we will have automatically disk space back.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Thu, 31 Jan 2013 10:48:00 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2013-01-31:how-to-get-back-free-space-after-deleting-mysql-database.html</guid><category>MySQL</category></item><item><title>How to start Django project correctly</title><link>http://richard.kellnerovci.sk/how-to-start-django-project-correctly.html</link><description>&lt;p&gt;To start project on solid foundation, we have to do several things. In this article we will talk about what is required to be done to have Django project that is independent on packages in operating system, is versioned with Git, has database migrations. We will also scratch how to easily create our own functions for automatic deployment and testing on local or remote server.&lt;/p&gt;
&lt;p&gt;We have already spoke about some of this topics so in this article they will be tied together with some extra explanations. At the end we will have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fully functional Django project&lt;/li&gt;
&lt;li&gt;All files will be under Git control&lt;/li&gt;
&lt;li&gt;Project will be independent on system packages&lt;/li&gt;
&lt;li&gt;Framework upon which we can build automatic deployment and testing&lt;/li&gt;
&lt;li&gt;Automatic DB migrations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this will give us solid foundation for any Django project, either you are doing your own project or you would like to collaborate with other developers.&lt;/p&gt;
&lt;p&gt;Lets create directory with our project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir projectX
cd projectX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we would install Django to operating system globally, it will be used globally for all packages. We just want to have only packages that are required for our project and we will use virtualenv for it. There are couple reasons for it, for example if we want to update some packages in project we are able to deploy test instance in separate directory and we can tune possible problems there. Even more important is situation when there are multiple collaborators on project, that they will have all the same dependencies, never the less what they have installed globaly. &lt;/p&gt;
&lt;p&gt;Instructions how to install virtualenv have been explained in previous &lt;a href="/how-to-start-with-virtualenv.html"&gt;article&lt;/a&gt;. For this article purpose, it is expected that you have installed them. We can initialise virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source envs/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can install Django (in the time of writing this article, recent version is 1.4.2)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start new project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django-admin.py startproject x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django will create following directories structure: (. is our directory projectX)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
|-- envs
`-- x
    |-- manage.py
    `-- x
        |-- __init__.py
        |-- settings.py
        |-- urls.py
        `-- wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step is voluntary, and more my personal preference to remove one extra directory, if you have django installed globally you can start project first and afterwards create virtual environment. Both cases will work fine, my preference is following (. is our directory projectX):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
|-- envs
|-- manage.py
`-- x
    |-- __init__.py
    |-- settings.py
    |-- urls.py
    `-- wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to configure database in settings.py, otherwise we won’t be able to run project and commands will end with error.&lt;/p&gt;
&lt;p&gt;In root directory we will create file .gitignore, reason for this is that we don’t want git to manage files in virtual environments. Installed packages shouldn’t be pard of version control. Content of the file is files and directories that shall be ignored, in our case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let’s initialize git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add existing files and do you first commit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
git commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For automatic deployment and testing I recommend Fabric library&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install fabric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fabric is expecting file &lt;code&gt;fabfile.py&lt;/code&gt;, which will contain actions. Create file in root directory of the project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare_deployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python manage.py test auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git add -p &amp;amp;&amp;amp; git commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git checkout master &amp;amp;&amp;amp; git merge &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;branch_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create sequence of steps, that we would like to execute, so we don’t forget anything. Fabric is working with standard python code so we can write almost anything. In our case before commit into git we run tests for auth application. I wanted to show how can automatically tests be run before commit, so we have clean code in git that was already tested. &lt;/p&gt;
&lt;p&gt;For database migrations we will use South library. This library will help to create or update database without writing any SQL queries. Changes in models are tracked automatically and with help of migration files, which are generated by South, we can move forward and also backward in the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install south
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we can use it in our project it has to be added into INSTALLED_APS in ‘’settings.py’’. Notice that only now we execute our first database sync:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reason for this is that South will amend DB as it needs, and also because South is installed from the beginning and all migrations are recorded and can be done via South.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Fri, 30 Nov 2012 23:33:02 +0100</pubDate><guid>tag:richard.kellnerovci.sk,2012-11-30:how-to-start-django-project-correctly.html</guid><category>Django</category><category>git</category><category>virtualenv</category></item><item><title>PHPNW 2012</title><link>http://richard.kellnerovci.sk/phpnw-2012.html</link><description>&lt;p&gt;I have been lucky and during the weekend I attended PHPNW 2012 in Manchester. I would like to express my feelings and shortly describe what it was about. Conference has started on Friday with workshops and probably most interesting was Rob Allen and Evan Coury with: Building a Zend Framework 2 Application.&lt;/p&gt;
&lt;p&gt;On Saturday morning official part was opened by Ade Oshineye with Developer Experience, API Design and Craft Skills. He explained how he had worked on Google Maps API and what should developers think about when designing APIs. During the day I have checked several speeches, and I will mention at two of them. Effective Code Reviews, by Sebastian Marek, how to automate tasks before we start to review code after other developers and what to focus on so this review has meaning. At the end Ian Barber from Google spoke how to manage large amount of data from live stream in speech Building a Firehose. After all speeches there was short word by sponsors and we all went for a beer, to have a technical and less technical discussions…&lt;/p&gt;
&lt;p&gt;Sunday was shorter, but still very interesting. John Cleveley was speaking how did they create a responsive page for BBC and for the rest of the day I have decided to learn theories, I went to listen to Harrie Verveer how to Recognizing Smelly Code. And at the end I watched The Art of Application Logging, by Ben Waine.&lt;/p&gt;
&lt;p&gt;Appart from news that happened in PHP world lectures were more or less advanced. Therefore I think conference was addition and I can recommend next year to any PHP programmer. At the end I will just mention that all speeches were recorded, so hopefully they will be available on &lt;a href="http://conference.phpnw.org.uk/phpnw12/" title="PHPNW 2012"&gt;official page&lt;/a&gt; soon.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Mon, 08 Oct 2012 15:12:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2012-10-08:phpnw-2012.html</guid><category>PHP</category><category>Conference</category></item><item><title>Serving static files in production environment with Django and Apache</title><link>http://richard.kellnerovci.sk/serving-static-files-in-production-environment-with-django-and-apache.html</link><description>&lt;p&gt;Launching Django project in production environment, sometimes can end up in a state where pictures, css, javastript and other things might not load. Mostly this is result of wrong static files setup. In this article we will show how to set it up correctly.&lt;/p&gt;
&lt;p&gt;In production environment static files should be allways send by webserver. In order to manage this, we need to collect static files and make sure that they are served by webserver. In our case we will show it on Apache webserver configuration (but same applies for other webservers).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;STATIC_ROOT = &amp;#39;/var/www/localhost/htdocs/mysite/static/&amp;#39;
STATIC_URL = &amp;#39;/static/&amp;#39; # default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django knows where to collect static files, so we dont have to specify anything. If we use our own files we have to specify them in &lt;em&gt;STATICFILES_DIRS&lt;/em&gt; configuration variable. In directory &lt;em&gt;/var/www/localhost/htdocs/mysite/&lt;/em&gt; we have to execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will copy all static files from all installed applications. If you want to save space, it is possible to run script with parameter &lt;em&gt;-l&lt;/em&gt; and it will create symbolic links instead of copy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;httpd.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to configure webserver so it knows where are static files stored. Let's modify Apache's config (either httpd.conf, or vhost) and add information about &lt;em&gt;STATIC_URL&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Alias /static/ /var/www/localhost/htdocs/mysite/static/
Directory /var/www/localhost/htdocs/mysite/static
Order deny,allow
Allow from all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart Apache and we are done. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Fri, 27 Jul 2012 17:13:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2012-07-27:serving-static-files-in-production-environment-with-django-and-apache.html</guid><category>Django</category><category>Apache</category></item><item><title>How to start with virtualenv?</title><link>http://richard.kellnerovci.sk/how-to-start-with-virtualenv.html</link><description>&lt;p&gt;As the name virtualenv implies, it is isolated virtual environment, which allows us install multiple versions of python applications and libraries on one system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What is it good for?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Python allows install packages, which are available globally for whole system. If you are developing multiple applications, which needs different versions of dependencies, it is the right time to use virtual environments. For example we have web application that uses Django 1.3.1 and we want to migrate it into version 1.4.0 and have both versions available at the same time. This is what is virtual environments used for, because it allows us to have installed both versions on one machine at the same time.&lt;/p&gt;
&lt;p&gt;We will use pip (Python Package Manager) for installation, but if you are used to easy_install you can use it as well. Following commands requires root access, or at least sudo access, so you can install packages globally for all users.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install pip
sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next command execute as standard user, who would like to use virtual environments. Lets create directory where will be python isolated environment, where all packages will be stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv --no-site-packages envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step is activate virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd envs
source bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After executing this command, our command line changes a little bit, and now we can install packages into our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django==1.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this command will install django version 1.4.0 into virtual environment, and all other users can use globaly installed django version 1.3.1. This way you can install all necessary packages for your application. Later when we will need to move (synchronize) them from your virtual environment into server, or other computer, simply export all installed packages into text file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on server just install all packages with command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Sat, 23 Jun 2012 16:37:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2012-06-23:how-to-start-with-virtualenv.html</guid><category>Python</category><category>virtualenv</category></item><item><title>EXT3/EXT2 filesystem in Mac OS X Lion</title><link>http://richard.kellnerovci.sk/ext3ext2-filesystem-in-mac-os-x-lion.html</link><description>&lt;p&gt;While ago I needed to mount EXT3 file system in Mac OS X Lion, it doesn’t seems as a big problem as there is plenty of manuals how to do it. Unfortunately most of them are out of date. So I have decided to write down how to do it.&lt;/p&gt;
&lt;p&gt;We will need this software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/downloads/osxfuse/osxfuse/OSXFUSE-2.3.4.dmg"&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://prdownloads.sourceforge.net/fuse-ext2/fuse-ext2-0.0.7.dmg?download"&gt;Fuse-ext2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is required to install them in this order.&lt;/p&gt;
&lt;p&gt;Fuse-ext2 require MacFuse to work, unfortunately this one is no longer maintained and doesn’t works in Lion. OSXFuse is next generation MacFuse, but Fuse-ext2 wasn’t designed to work with it. Luckily OSXFuse has “MacFUSE Compatibility Layer”. Select this option while installing OSXFuse and you are ready to go.&lt;/p&gt;
&lt;p&gt;Once everything is installed, try to mount EXT3 or EXT2 partition on USB key and key should automatically mount.&lt;/p&gt;
&lt;p&gt;PS. &lt;em&gt;Disk is read only, without possibility of write because this option is unstable.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Kellner</dc:creator><pubDate>Wed, 30 May 2012 01:00:00 +0200</pubDate><guid>tag:richard.kellnerovci.sk,2012-05-30:ext3ext2-filesystem-in-mac-os-x-lion.html</guid><category>Mac OS X</category><category>EXT3</category></item></channel></rss>